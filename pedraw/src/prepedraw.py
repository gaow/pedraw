import sys, os, subprocess, re
from shutil import copyfile
from . import env
from latexmake import LatexMaker

_TEXBGN_ = r'''
\documentclass{article}
\usepackage{ifpdf}
\ifpdf
  \usepackage{auto-pst-pdf}
\else
  \usepackage{pstricks}
\fi
\usepackage{pst-pdgr}
\usepackage[multidot]{grffile}  
\thispagestyle{empty}
\begin{document}
'''
_TEXEND_ = r'\end{document}'

#we need to make a csv file with each person's information in it. According to the rule of csv file, we create two dictionaries below, convert the sex and trait information in ped file into what required by csv file.
_SEX_ = {'1':'male', '2':'female', '0':''}
_CONDITION_ = {'1':'normal', '2':'affected', '0':''}


class Struct:
    def __init__(self, **entries): 
        self.__dict__.update(entries)

class PedigreeDrawer:
    def __init__(self, file_name, fid):
        self.output = '{}.{}'.format(file_name, fid)
        self.id = fid   #this is family ID
        self.tmpfile = os.path.join(env.tmp_dir, self.output)
        self.csv = self.tmpfile + '.csv'
        self.cfg = self.tmpfile + '.cfg'
        self.tex = self.tmpfile + '.tex'
        
    def WriteInput(self, data):
        '''convert data to pedigree.pl input, which is a csv file'''
        #below, we create a function that can generate parent 'Id' required by csv file. Each 'Id' should contain only letters and numbers, and can only start with a letter. So in our design, the 'Id' is 'F'+family ID +'P'+personal ID. For each person, his/her 'Mother'/'Father' in csv file must be the 'Id' of his/her mother/father. In a ped file, if a person's father ID or mother ID is '0', it means the person has no father/mother in the ped file. In csv file, the 'Mother'/'Father' should be '' under such circumstances.
        def produce_parent_csvId(x, y):
            if y!='0':
                return 'F{}P{}'.format(x, y)
            else:
                return ''

        with open(self.csv,'w') as csv_file:
            csv_file.write('Id'+'|'+'Name'+'|'+'Sex'+'|'+'Mother'+'|'+'Father'+'|'+'Condition'+'\n')
            for k in data:
            # data is a dictionary, the keys are personal IDs, like {person:info, person:info, person:info}. It is generated by Biao's class pedInfo.py
                new_line = '|'.join(['F{}P{}'.format(self.id, k), k,
                                   _SEX_[data[k]['sex']],
                                   produce_parent_csvId(self.id, data[k]['motherID']),
                                   produce_parent_csvId(self.id, data[k]['fatherID']),
                                   _CONDITION_[data[k]['trait']]]) + '\n'
                csv_file.write(new_line)

#the pdgr program we use also need a configuration file, if you don't provide it, it will use default values. In order to let user choose some parameters of figures, we will generate a configuration file according to the parameters specified by users
    def WriteConfig(self, belowtextfont, abovetextfont,
                    descarmA, xdist, ydist, maxW, maxH, auto_rotate = True):
        '''write cfg file'''
        res = ['$fulldoc=0', '$printlegend=0', '$language="english"',
               "$belowtextfont='\\{}'".format(belowtextfont), "$abovetextfont='\\{}'".format(abovetextfont),
               '$descarmA = {}'.format(descarmA), '$xdist = {}'.format(xdist), '$ydist = {}'.format(ydist), 
               '$maxW = {}'.format(maxW), '$maxH = {}'.format(maxH),
               "$rotate = '{}'".format("maybe" if auto_rotate else "no"), "1"]
        with open(self.cfg, 'w') as f:
            f.write('\n'.join(["{};".format(x) for x in res]))

#below we let pdgr program written in perl to generate Latex files for us
    def GenerateTex(self, pseudo_proband, genotypes = None, marker_names = None):
        '''perl pedigree.pl -c config.cfg -o - -s F{}P{} data.csv'''
        out, error = subprocess.Popen(
            ['perl', os.path.join(env.resource_dir, 'pedigree.pl'),
             '-c', self.cfg, '-o', '-', '-s', 'F{}P{}'.format(self.id, pseudo_proband), self.csv],
             stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.PIPE,
             env = {'PERL5LIB': "{}:{}".format(os.path.join(env.resource_dir, 'Pedigree'), env.resource_dir),
                    'PATH':os.getenv('PATH')}).communicate()
        if sys.version_info.major == 3:
            out = out.decode(sys.getdefaultencoding())
        if genotypes is not None:
            out += '\n' + self.__TrackGenotypes(genotypes, marker_names, out)
        with open(self.tex, 'w') as f:
           f.write('\n'.join([_TEXBGN_, out, _TEXEND_]))

#below we will generate pdf files using the Latex files just generated by pdgr program. Instead of writing program ourselves, we use the latexmake.py written by others 
    def GeneratePDF(self, verbose = False):
        opts = Struct(**{'clean':False, 'verbose':verbose, 'exit_on_error':True,
                         'preview':False, 'pdf':True, 'check_cite':False})
        current_dir = os.getcwd()
        os.chdir(env.tmp_dir)
        LatexMaker(os.path.split(self.tex)[-1], opts).run()
        os.chdir(current_dir)
        copyfile(self.tmpfile + '-pics.pdf', self.output + '.pdf')

    def __TrackGenotypes(self, genotypes, marker_names, out):
        #FIXME
        return ''
